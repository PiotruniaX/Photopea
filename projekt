import cv2
import numpy as np
import matplotlib.pyplot as plt
from tkinter import Tk, Button, Label, Frame, LEFT, RIGHT, TOP, BOTTOM
from PIL import Image, ImageTk

# === Przygotowanie obrazów ===
img = cv2.imread('image.jpg')
if img is None:
    raise FileNotFoundError('Brak pliku image.jpg')

img2 = cv2.imread("image2.jpg")
if img2 is None:
    raise FileNotFoundError('Brak pliku image2.jpg')

img2 = cv2.resize(img2, (img.shape[1], img.shape[0]))

results = []

# --- Operacje ---
bright = cv2.convertScaleAbs(img, alpha=1.5, beta=30)
dark = cv2.convertScaleAbs(img, alpha=0.5, beta=0)
neg = 255 - img
results += [('Bright', bright), ('Dark', dark), ('Negative', neg)]

gamma = 2.2
lut = np.array([(i/255.0)**(1/gamma)*255 for i in range(256)], dtype=np.uint8)
gamma_img = cv2.LUT(img, lut)
results.append(('Gamma', gamma_img))

results += [
    ('Blend Add', cv2.add(img, img2)),
    ('Blend Subtract', cv2.subtract(img, img2)),
    ('Blend Multiply', cv2.multiply(img, img2)),
    ('Blend AND', cv2.bitwise_and(img, img2))
]

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
cl = clahe.apply(gray)
clahe_rgb = cv2.cvtColor(np.stack([cl]*3, axis=-1), cv2.COLOR_BGR2RGB)
results.append(('CLAHE', clahe_rgb))

groups = cv2.split(img)
colors = ('b','g','r')
plt.figure()
for ch, col in zip(groups, colors):
    hist = cv2.calcHist([ch],[0],None,[256],[0,256])
    plt.plot(hist, label=col)
plt.legend(); plt.title('Histogram RGB')
plt.savefig('temp_hist.png')
plt.close()
hist_img = cv2.imread('temp_hist.png')
hist_img = cv2.resize(hist_img, (img.shape[1], img.shape[0]))
results.append(('Histogram', hist_img))

yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
yuv[:,:,0] = cv2.equalizeHist(yuv[:,:,0])
eq = cv2.cvtColor(yuv, cv2.COLOR_YUV2BGR)
results.append(('EqualizeHist', eq))

norm = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX)
results.append(('Normalize', norm))

low = cv2.GaussianBlur(img, (5,5), 0)
results.append(('Lowpass (Gaussian)', low))

sobel = cv2.Sobel(gray, cv2.CV_64F, 1, 1)
sobel = cv2.convertScaleAbs(sobel)
lap = cv2.Laplacian(gray, cv2.CV_64F)
lap = cv2.convertScaleAbs(lap)
results += [('Sobel', sobel), ('Laplace', lap)]

gerode = cv2.erode(gray, np.ones((3,3), np.uint8))
dilate = cv2.dilate(gray, np.ones((3,3), np.uint8))
median = cv2.medianBlur(gray, 3)
results += [('Min Filter', gerode), ('Max Filter', dilate), ('Median Filter', median)]


# === GUI ===
def cvimg_to_tk(img):
    if len(img.shape) == 2:
        img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return ImageTk.PhotoImage(Image.fromarray(img_rgb))

def show_result(title, image):
    tk_image = cvimg_to_tk(image)
    result_label.config(image=tk_image)
    result_label.image = tk_image
    result_title.config(text=title)

root = Tk()
root.title("Przetwarzanie obrazu")

# Górny panel z obrazami źródłowymi
top_frame = Frame(root)
top_frame.pack(side=TOP, pady=10)

img1_tk = cvimg_to_tk(img)
img2_tk = cvimg_to_tk(img2)

Label(top_frame, text="image.jpg").pack(side=LEFT, padx=10)
Label(top_frame, image=img1_tk).pack(side=LEFT, padx=10)

Label(top_frame, text="image2.jpg").pack(side=LEFT, padx=10)
Label(top_frame, image=img2_tk).pack(side=LEFT, padx=10)

# Środkowa część – przyciski po lewej, wynik po prawej
middle_frame = Frame(root)
middle_frame.pack(side=TOP, fill='both', expand=True, padx=10, pady=10)

button_frame = Frame(middle_frame)
button_frame.pack(side=LEFT, anchor='n', padx=10)

display_frame = Frame(middle_frame)
display_frame.pack(side=RIGHT, fill='both', expand=True)

result_title = Label(display_frame, text="Kliknij przycisk, aby zobaczyć wynik", font=("Arial", 14))
result_title.pack(pady=5)

result_label = Label(display_frame)
result_label.pack()

# Przyciski operacji
for title, output in results:
    Button(button_frame, text=title, width=20, command=lambda t=title, i=output: show_result(t, i)).pack(pady=2)

root.mainloop()
